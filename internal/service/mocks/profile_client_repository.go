// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/distuurbia/tradeAPI/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProfileClientRepository is an autogenerated mock type for the ProfileClientRepository type
type ProfileClientRepository struct {
	mock.Mock
}

// AddRefreshToken provides a mock function with given fields: ctx, refreshToken, id
func (_m *ProfileClientRepository) AddRefreshToken(ctx context.Context, refreshToken []byte, id uuid.UUID) error {
	ret := _m.Called(ctx, refreshToken, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, uuid.UUID) error); ok {
		r0 = rf(ctx, refreshToken, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProfile provides a mock function with given fields: ctx, profile
func (_m *ProfileClientRepository) CreateProfile(ctx context.Context, profile *model.Profile) error {
	ret := _m.Called(ctx, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProfile provides a mock function with given fields: ctx, id
func (_m *ProfileClientRepository) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPasswordAndIDByUsername provides a mock function with given fields: ctx, username
func (_m *ProfileClientRepository) GetPasswordAndIDByUsername(ctx context.Context, username string) (uuid.UUID, []byte, error) {
	ret := _m.Called(ctx, username)

	var r0 uuid.UUID
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uuid.UUID, []byte, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uuid.UUID); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRefreshTokenByID provides a mock function with given fields: ctx, id
func (_m *ProfileClientRepository) GetRefreshTokenByID(ctx context.Context, id uuid.UUID) ([]byte, error) {
	ret := _m.Called(ctx, id)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]byte, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []byte); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProfileClientRepository creates a new instance of ProfileClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileClientRepository {
	mock := &ProfileClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
