// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/distuurbia/tradeAPI/internal/model"

	uuid "github.com/google/uuid"
)

// ProfileService is an autogenerated mock type for the ProfileService type
type ProfileService struct {
	mock.Mock
}

// DeleteProfile provides a mock function with given fields: ctx, id
func (_m *ProfileService) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtractIDFromAuthHeader provides a mock function with given fields: authHeaderString
func (_m *ProfileService) ExtractIDFromAuthHeader(authHeaderString string) (uuid.UUID, error) {
	ret := _m.Called(authHeaderString)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uuid.UUID, error)); ok {
		return rf(authHeaderString)
	}
	if rf, ok := ret.Get(0).(func(string) uuid.UUID); ok {
		r0 = rf(authHeaderString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authHeaderString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *ProfileService) Login(ctx context.Context, username string, password []byte) (*model.TokenPair, error) {
	ret := _m.Called(ctx, username, password)

	var r0 *model.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (*model.TokenPair, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) *model.TokenPair); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx, tokenPair
func (_m *ProfileService) Refresh(ctx context.Context, tokenPair *model.TokenPair) (*model.TokenPair, error) {
	ret := _m.Called(ctx, tokenPair)

	var r0 *model.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TokenPair) (*model.TokenPair, error)); ok {
		return rf(ctx, tokenPair)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TokenPair) *model.TokenPair); ok {
		r0 = rf(ctx, tokenPair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TokenPair) error); ok {
		r1 = rf(ctx, tokenPair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, profile
func (_m *ProfileService) SignUp(ctx context.Context, profile *model.Profile) error {
	ret := _m.Called(ctx, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Profile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProfileService creates a new instance of ProfileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileService {
	mock := &ProfileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
